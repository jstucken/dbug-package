Metadata-Version: 2.1
Name: dbug-package
Version: 0.1.0
Summary: A minimal debug package for printing out things nicely
Author: Jonathan Stucken
Author-email: jstucken@yahoo.com
Requires-Python: >=3.8,<4.0
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Requires-Dist: python-dotenv (>=1.0.0,<2.0.0)
Requires-Dist: rich (>=13.3.3,<14.0.0)
Requires-Dist: typer (>=0.7.0,<0.8.0)
Description-Content-Type: text/markdown

# dbug-package
Jono's custom Python debugging script.

Similar to but a bit more fancy than using Python's inbuilt `pprint` library to debug/print out your Python variables.

Does a nice job of printing out strings, dictionaries, dataframes, JSON etc.

Note: This is not a true Python debugger in any way, more just a fancy print out class!

# Installation

**Install using pip:**

    pip install dbug-package@git+ssh://git@github.com/jstucken/dbug-package

Or add the following to your `requirements.txt`:

    dbug-package @ git+ssh://git@github.com/jstucken/dbug-package

**Install using [Poetry](https://python-poetry.org/):**

    poetry add git+ssh://git@github.com/jstucken/dbug-package.git
    poetry update

Or manually add the following to your `pyproject.toml` file:

    [tool.poetry.dependencies]
    dbug-package = { git = "ssh://git@github.com/jstucken/dbug-package.git" }

# Usage

Import with:

    from dbug_package.dbug import Dbug as dbug

Then call within your script like this:

    # an example list
    names = ['bill', 'mary']

    dbug(names, "A list of names")

Which will print out something like:

    1) ###########################################################
    [12:23:05] DEBUG    DBUGGING 'A list of names' <class 'list'> (len: 2) in test.py line 6:

    ['bill', 'mary']
